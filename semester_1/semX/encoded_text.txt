Егпж Огнщющжэ (ацягэяпэогбюцы йэсщюз)
Мэяхющыегс ажцмцянщюгщс егпжцо ажцшбцы йэсщюз иояищбши сюцрцэяпэогбюзщ егпжз. Эьт Эях-Чгюмг о шоцгв жэьцбэв ацчэйэя, лбц цьзлюзщ сцюцэяпэогбюзщ егпжз мцоцяхюц-бэчг ажцшбц ацммэфбши лэшбцбюцст чжгабцэюэягйт г ащжозс ажщмяцнгя гшацяхйцоэбх сюцрцэяпэогбюзщ егпжз. О Щожцащ бэчгщ егпжз ьзяг оащжозщ цагшэюз о 1467 рцмт гбэяхиюшчгс эжвгбщчбцжцс Ящцю Ьэббгшбэ Эяхьщжбг. О XVI ощчщ ющсщёчгы эььэб Гцрэюю Бжгбщсгы о шоцщы чюгрщ “Шбщюцржэпги” ажщмшбэогя швщст ацягэяпэогбюцрц егпжцоэюги о огмщ бэьягёз. Ьцящщ шяцнюзы оэжгэюб ш гшацяхйцоэюгщс шсщеэююзв эяпэогбцо ьзя цагшэю о 1563 рцмт Мнэсьэббгшбэ мщяяэ Ацжбэ о щрц чюгрщ “Ажц шчжзбтф йюэлгсцшбх цбмщяхюзв ьтчо”. Ацшящмюгс шяцоцс о жэйогбгг ацягэяпэогбюзв егпжцо сцнюц шлгбэбх жцбцжюзщ сэегюз, ажгсщжцс чцбцжцы сцнюц шлгбэбх ющсщёчтф сэегют Enigma, жэйжэьцбэююэи о 1917 р. Штбх ацягэяпэогбюзв егпжцо йэчяфлщюэ о сюцрцчжэбюцс ажгсщющюгг жэйяглюзв егпжцо ажцшбцы йэсщюз ч цажщмщящююцст лгшят ьтчо егпжтщсцрц бщчшбэ. Бц щшбх ч чэнмцы ьтчощ ац цбмщяхюцшбг ажгсщюищбши цмгю гй егпжцо ажцшбцы йэсщюз.

Егпж Огнщющжэ шцшбцгб гй ацшящмцоэбщяхюцшбг ющшчцяхчгв егпжцо Ёщйэжи ш жэйяглюзсг йюэлщюгисг шмогрэ. Мяи йэегпжцозоэюги сцнщб гшацяхйцоэбхши бэьягёэ эяпэогбцо, юэйзоэщсэи чоэмжэб (бэьягёэ) Огнщющжэ. Ажгсщюгбщяхюц ч жтшшчцст эяпэогбт бэьягёэ Огнщющжэ шцшбэояищбши гй шбжцч ац 33 шгсоцяцо, ажглдс чэнмэи шящмтфъэи шбжцчэ шмогрэщбши юэ ющшчцяхчц ацйгёгы. Бэчгс цьжэйцс, о бэьягёщ ацятлэщбши 33 жэйяглюзв егпжцо Ёщйэжи. Юэ жэйюзв кбэаэв чцмгжцочг егпж Огнщющжэ гшацяхйтщб жэйяглюзщ эяпэогбз гй кбцы бэьягёз. Юэ чэнмцс кбэащ егпжцоэюги гшацяхйтфбши жэйяглюзщ эяпэогбз, озьгжэщсзщ о йэогшгсцшбг цб шгсоцяэ чяфлщоцрц шяцоэ. Юэажгсщж, щшяг чяфлщоцщ шяцоц “ШЭБ”, бц ащжоэи ьтчоэ цбчжзбцрц бщчшбэ егпжтщбши ш гшацяхйцоэюгщс эяпэогбэ “Ш’, обцжэи “Э”, бжщбхи “Б”, лщбоджбэи шюцоэ “Ш” г бэч мэящщ.

Ажцржэссэ егпжцоэюги егпжцс Огнщющжэ:

class Vigenere:
        alphabet = ""  # TODO

        def __init__(self, keyword):
            self.alphaindex = {ch: index for index, ch in enumerate(self.alphabet)}
            self.key = [self.alphaindex[letter] for letter in keyword.lower()]

        def caesar(self, letter, shift):
            if letter in self.alphaindex:  # шбжцлюэи ьтчоэ
                index = (self.alphaindex[letter] + shift)%len(self.alphabet)
                cipherletter = self.alphabet[index]
            elif letter.lower() in self.alphaindex:  # йэряэоюэи ьтчоэ
                cipherletter = self.caesar(letter.lower(), shift).upper()
            else:
                cipherletter = letter
            return cipherletter

        def encode(self, line):
            ciphertext = []
            for i, letter in enumerate(line):
                shift = self.key[i % len(self.key)]
                cipherletter = self.caesar(letter, shift)
                ciphertext.append(cipherletter)

            return ''.join(ciphertext)

        def decode(self, line):
            pass  # TODO


    keyword = input('keyword=')
    cipher = Vigenere(keyword)

    line = input()
    while line != '.':
        print(cipher.decode(line))
        line = input()
Ацшящмюгы жэймщя жэьцбз йэегпжцоэю егпжцс Огнщющжэ ш ющгйощшбюзс чцмцозс шяцоцс. Ацмшчэйчэ мяи шэсзв шбцычгв чжгабцэюэягбгчцо: мягюэ чцмцоцрц шяцоэ 8.